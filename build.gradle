plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2025.2.1"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = true  // Change to true to delete files on roboRIO that no
                                           // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true
// Enable DS but not by default
wpi.sim.addDriverstation()

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Enable simulation for this component
            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    // testSuites {
    //     frcUserProgramTest(GoogleTestTestSuiteSpec) {
    //         testing $.components.frcUserProgram

    //         sources.cpp {
    //             source {
    //                 srcDir 'src/test/cpp'
    //                 include '**/*.cpp'
    //             }
    //         }

    //         // Enable run tasks for this component
    //         wpi.cpp.enableExternalTasks(it)

    //         wpi.cpp.vendor.cpp(it)
    //         wpi.cpp.deps.wpilib(it)
    //         wpi.cpp.deps.googleTest(it)
    //     }
    // }
}

// PCH precompile task 
def pchHeader    = file('src/main/include/pch.hpp')
def pchOutputDir = file("$buildDir/pch")
tasks.register('compilePch', Exec) {
    description = "Precompile pch.hpp into ${pchOutputDir}/pch.hpp.gch"
    inputs.file(pchHeader)
    outputs.file(file("$pchOutputDir/pch.hpp.gch"))

    doFirst {
        pchOutputDir.mkdirs()
    }

    // get all include dirs from one of the CppCompile tasks
    // (just picking the first frcUserProgram compile task found)
    def sample = tasks.withType(CppCompile)
                        .matching { it.name.toLowerCase().contains("frcuserprogram") }
                        .first()
    // make a list of include flags: ['-I', 'dir1', '-I', 'dir2', ...]
    def includeFlags = sample.includes.files.collectMany { dir ->
        ["-I", dir.absolutePath]
    }

    // build up the compile command 
    // TODO: Using windows filepath, make more generic
    commandLine = [
        "C:/Users/Public/wpilib/2025/roborio/bin/arm-frc2025-linux-gnueabi-g++.exe",
        "-std=c++20",
    ] + includeFlags + [
        "-x", "c++-header",
        pchHeader.absolutePath,
        "-o", "${pchOutputDir}/pch.hpp.gch"
    ]
}

// Wire every C++ compile to depend on & use the PCH
tasks.withType(CppCompile).configureEach { task ->
  task.dependsOn("compilePch")
  task.compilerArgs.addAll("-include", "pch.hpp")
  task.includes.from(file("$buildDir/pch"))
}

import org.gradle.language.cpp.tasks.CppCompile

tasks.register("printPchIncludeDirs") {
  group = "help"
  description = "Prints all the include paths Gradle uses for frcUserProgram C++ compiles."

  doLast {
    tasks.withType(CppCompile).matching { t ->
      t.name.toLowerCase().contains("frcuserprogram")
    }.each { t ->
      println "=== ${t.name} includes: ==="
      t.includes.files.each { dir ->
        println "  â€¢ " + dir.absolutePath
      }
    }
  }
}

